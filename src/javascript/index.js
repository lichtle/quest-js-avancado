// Imports de fetch

import { getUser } from "./services/get-user.js";
import { getRepositories } from "./services/get-repositories.js";
import { getEvents } from "./services/get-events.js";

// Imports de objeto

import { user } from "./objects/user.js";
import { screen } from "./objects/screen.js";

const button = document.getElementById("btn-search");
const input = document.getElementById("input-search");

button.addEventListener("click", () => {
  const userName = document.getElementById("input-search").value;
  if (validateEmptyInput(userName)) return; // Caso o retorno da fun√ß√£o criada no final deste c√≥digo seja realmente verdadeiro, este return serve para impedir que o c√≥digo continue rodando e a fun√ß√£o getUserData abaixo seja chamada mesmo assim
  getUserData(userName);
});

input.addEventListener("keyup", (event) => {
  const userName = event.target.value; // event.target diz respeito ao pr√≥pro eventListener e value pega seu valor
  const key = event.which || event.keyCode;
  const isEnterKeyPressed = key === 13; // O c√≥digo da tecla Enter √© 13

  if (isEnterKeyPressed) {
    // Se isEnterKeyPressed for igual a true (key === 13), a fun√ß√£o getUserData √© disparada, assim como quando clicamos no bot√£o de buscar
    if (validateEmptyInput(userName)) return;
    getUserData(userName);
  }
});

function validateEmptyInput(userName) {
  if (userName.length === 0) {
    // Verifica se algum nome de usu√°rio foi escrito
    alert("Preencha o campo com o nome do usu√°rio");
    return true; // Este return serve para impedir que o c√≥digo continue rodando (mais infos no primeiro coment√°rio do c√≥digo)
  }
}

// >>> As fun√ß√µes de fetch se encontravam aqui antes da refatora√ß√£o. Elas foram movidas para a pasta "src/javascript/services"

// >>> Com os dados em m√£o, agora criamos uma fun√ß√£o para pegar o perfil do usu√°rio:

async function getUserData(userName) {
  // Antigamente nomeada "getUserProfile", pois antes da refatora√ß√£o era uma fun√ß√£o para pegar os dados do usu√°rio e outra fun√ß√£o para pegar os reposit√≥rios (essas fun√ß√µes est√£o documentadas abaixo)
  const userResponse = await getUser(userName); // Ao inv√©s de usar o then, na refatora√ß√£o utilizamos o async e await e armazenamos a resposta em uma vari√°vel

  if (userResponse.message === "Not Found") {
    // Verifica se o usu√°rio foi encontrado. Se n√£o, a promise retornar√° um objeto com chave message e valor "Not Found" e ir√° disparar a fun√ß√£o renderNotFound, criada no objeto screen do arquivo "objects/screen.js"
    screen.renderNotFound();
    return;
  }

  const repositoriesResponse = await getRepositories(userName);
  const eventsResponse = await getEvents(userName);

  user.setInfo(userResponse); // Invocando a fun√ß√£o criada dentro do objeto importado "user" e colocando as informa√ß√µes retornadas da promise acima dentro dela. Se dermos um console.log(user) veremos que agora temos o objeto user preenchido somente com as informa√ß√µes necess√°rias determinadas no arquivo "src/javascript/objects/user.js"
  user.setRepositories(repositoriesResponse); // O coment√°rio acima vale para esta fun√ß√£o, que retorna os reposit√≥rios do usu√°rio
  user.setEvents(eventsResponse);
  screen.renderUser(user); // Fun√ß√£o para renderizar todas as infos dos usu√°rios na tela
}

/* >>> A fun√ß√£o getUserData acima √© resultado da refatora√ß√£o das fun√ß√µes abaixo (getUserProfile para informa√ß√µes do perfil e getUserRepositories para os reposit√≥rios):

  function getUserProfile(userName){
    getUser(userName).then((userData) => { // Aqui temos o retorno da promise, com as infos dos usu√°rios. 
    let userInfo = `<div class="info">
                        <img src="${
                          userData.avatar_url
                        }" alt="Foto de perfil do usu√°rio">
                        <div class="data">
                          <h1>${
                            userData.name ?? "N√£o possui nome de usu√°rio. üòì"
                          }</h1>
                          <p>${
                            userData.bio ?? "Este usu√°rio n√£o possui bio. üò¢"
                          }</p>
                        </div>
                    </div>`;
  const repositoriesResponse = await getRepositories(userName);

    document.querySelector(".profile-data").innerHTML = userInfo;
  user.setInfo(userResponse);
  user.setRepositories(repositoriesResponse);
  screen.renderUser(user);

    getUserRepositories(userName); // A fun√ß√£o getUserProfile (disparada ao apertar Enter ou clicar no bot√£o "Buscar") j√° chamava a getUserRepositories abaixo
  })
  console.log(userResponse);
}
function getUserRepositories(userName) {
  getRepositories(userName).then((repositoriesData) => {
    let repositories = "";
    repositoriesData.forEach((repo) => {
      // Esse par√¢metro corresponde ao "item" do forEach
      repositories += `<li><a href="${repo.html_url}" target="_blank">${repo.name}</a></li>`; // Criar√° um li para cada item recebido
    });
    document.querySelector(
      ".profile-data"
    ).innerHTML += `<div class="repositories section">
                      <h2>Reposit√≥rios</h2>
                      <ul>${repositories}</ul>
                    </div>`;
    // += para concatenar com as informa√ß√µes j√° obtidas anteriormente pela fun√ß√£o getUserProfile
  });
} */
